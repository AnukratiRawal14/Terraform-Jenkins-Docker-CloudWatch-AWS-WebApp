pipeline {
    agent any
		
    environment {
        TF_VAR_environment = "${env.BRANCH_NAME}"
        AWS_REGION = "us-east-1"
    }

    stages {
        stage('Terraform Format') {
	    steps {
	        dir('infra_terraform_code') {
	            sh 'terraform fmt -check -recursive'
	        }
	    }
	}

       stage('Terraform Lint') {
	    steps {
	        dir('infra_terraform_code') {
	            sh '''
	                if ! command -v tflint &> /dev/null; then
	                  echo "Installing tflint..."
	                  curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
	                fi
	
	                tflint --init
	                tflint --recursive
	            '''
	        }
	    }
	}

	stage('Terraform Init') {
	    steps {
		dir('infra_terraform_code') {
		    script {
			def bucket      = "webapp-s3-tf-backend"
			def key         = "envs/${env.BRANCH_NAME}/terraform.tfstate"
			def region      = "${env.AWS_REGION}"
			def dynamoTable = "terraform-lock-table"
	
			sh """
			    terraform init \
			      -backend-config="bucket=${bucket}" \
			      -backend-config="key=${key}" \
			      -backend-config="region=${region}" \
			      -backend-config="dynamodb_table=${dynamoTable}" \
			      -backend-config="encrypt=true"
			"""
		    }
		}
	   }
	}

       stage('Terraform Plan') {
	    steps {
	        dir('infra_terraform_code') {
	            sh """
	                echo "Running terraform plan..."
	                terraform plan -out=tfplan-${env.BRANCH_NAME}.out
	            """
	        }
	    }
	}

	stage('Terraform Apply') {
	    steps {
	        dir('infra_terraform_code') {
	            sh """
	                echo "Manual apply step. Please run:"
	                echo "terraform apply tfplan-${env.BRANCH_NAME}.out"
	                terraform apply tfplan-${env.BRANCH_NAME}.out
	            """
	        }
	    }
}


    post {
        always {
            echo "Terraform pipeline completed for branch: ${env.BRANCH_NAME}"
        }
    }
}

